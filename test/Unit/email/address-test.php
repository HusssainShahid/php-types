<?php
declare(strict_types=1);

namespace email;

use jsys\types\email\Address;
use PHPUnit\Framework\TestCase;


class AddressTest extends TestCase
{
    private $sut;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_must_not_initialize_with_invalid_email()
    {
        $testInvalidEmail = 'hussain@gmail';
        $this->expectExceptionCode(1001);
        $this->expectExceptionMessage("Given string '$testInvalidEmail' is invalid.");
        $emailAddress = new Address($testInvalidEmail);
    }
    /**
     * @dataProvider invalidData
     */
    public function test_invalid_input_should_not_be_accepted($param, $expectedMsg, $expectedCode)
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionCode($expectedCode);
        $this->expectExceptionMessage($expectedMsg);
        $lName = new Address($param);

    }

    public function invalidData()
    {
        return [
            'No value' => ['', "Given string '' is invalid.", 1001],
            'Missing Domain' => ['abcd@gmail.', "Given string 'abcd@gmail.' is invalid.", 1001],
            'Missing @' => ['abcdgmail.com', "Given string 'abcdgmail.com' is invalid.", 1001],
            'Starting with .' => ['.abcd@gmail.com', "Given string '.abcd@gmail.com' is invalid.", 1001]];
    }
    /**
     * Test if the email is valid
     *
     * @param string $email
     * @dataProvider dataProviderEmails
     */
    public function testIsValidEmail(string $email)
    {
        $emailAddress = new Address($email);
        $this->assertInstanceOf('jsys\types\email\Address', $emailAddress);
        $this->assertEquals('jsys\types\email\Address', get_class($emailAddress));
        $this->assertEquals($emailAddress->value(), $email, 'Both must get the same value');
        //$this->assertEquals($expected, $result);
    }

    /**
     * @return array
     */
    public function dataProviderEmails(): array
    {
        return [
            ['first@example.com'],
            ['second@example.com'],
            ['second456@example.com'],
            ['shamsa@example.com'],
            ['example89@example.com'],
            ['example@example.com'],
        ];
    }
    public function tearDown(): void
    {
    }
}
